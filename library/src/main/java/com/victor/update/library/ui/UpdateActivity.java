package com.victor.update.library.ui;import android.Manifest;import android.app.Activity;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.provider.Settings;import android.text.TextUtils;import android.util.Log;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.core.content.FileProvider;import java.io.File;import java.util.Observable;import java.util.Observer;import com.victor.update.library.R;import com.victor.update.library.data.UpdateData;import com.victor.update.library.interfaces.OnDownloadProgressListener;import com.victor.update.library.model.DataObservable;import com.victor.update.library.model.DownLoadFileManager;import com.victor.update.library.model.DownLoadTask;import com.victor.update.library.util.Constant;import com.victor.update.library.util.FileUtils;import permission.victor.com.library.OnPermissionCallback;import permission.victor.com.library.PermissionHelper;public abstract class UpdateActivity extends AppCompatActivity implements Observer, OnPermissionCallback {    private String TAG = "UpdateActivity";    private static final int UNKNOWN_APP_SOURCES_REQUEST_CODE = 4;    private UpdateData info;    private PermissionHelper permissionHelper;    private String[] neededPermission;    public final static String[] MULTI_PERMISSIONS = new String[]{            Manifest.permission.READ_EXTERNAL_STORAGE,            Manifest.permission.WRITE_EXTERNAL_STORAGE,            Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS    };    private AlertDialog builder;    Handler mHandler = new Handler (){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Constant.Msg.INSTALL:                    installApk();                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_update);        initialize();    }    private void initialize () {        permissionHelper = PermissionHelper.getInstance(this,this);        DataObservable.getInstance().addObserver(this);        if (!permissionHelper.isPermissionGranted(this,Manifest.permission.WRITE_EXTERNAL_STORAGE)) {            requestPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE);            return;        }        startCheckService();    }    private void startCheckService () {        Log.e(TAG,"startCheckService()......");        Intent intent = new Intent();        intent.setAction(Constant.SERVICE_ACTION);        intent.setPackage(getPackageName());        startService(intent);    }    private void stopCheckService () {        Log.e(TAG,"stopCheckService()......");        Intent intent = new Intent();        intent.setAction(Constant.SERVICE_ACTION);        intent.setPackage(getPackageName());        stopService(intent);    }    private void installApk () {        Log.e(TAG,"installApk()......");        //兼容8.0        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            // 判断是否有权限            boolean haveInstallPermission = getPackageManager().canRequestPackageInstalls();            Log.e(TAG,"installApk()......haveInstallPermission = " + haveInstallPermission);            if(!haveInstallPermission){                //权限没有打开则提示用户去手动打开                Uri packageUri = Uri.parse("package:" + getPackageName());                Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES, packageUri);                startActivityForResult(intent, UNKNOWN_APP_SOURCES_REQUEST_CODE);                return;            }        }        Log.e(TAG,"installApk()......info = " + info);        if (info != null) {            Toast.makeText(getApplicationContext(),"即将安装：" + info.getAppName(),Toast.LENGTH_SHORT).show();//            Uri uri = Uri.fromFile(new File(info.getPath() + info.getAppName() + ".apk"));//            Intent intent = new Intent(Intent.ACTION_VIEW);//            intent.setDataAndType(uri,"application/vnd.android.package-archive");//            startActivity(intent);            File file = new File(info.getPath() + info.getAppName() + ".apk");            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                Intent intent = new Intent(Intent.ACTION_VIEW);                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                Uri apkUri = FileProvider.getUriForFile(this, "com.victor.com.update.fileProvider", file);                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);                intent.setDataAndType(apkUri, "application/vnd.android.package-archive");                try {                    startActivity(intent);                } catch (Exception e) {                    e.printStackTrace();                }            } else {                Uri uri = Uri.fromFile(file);                Intent intent = new Intent(Intent.ACTION_VIEW);                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                intent.setDataAndType(uri, "application/vnd.android.package-archive");                startActivity(intent);            }        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        super.onDestroy();        stopCheckService();    }    public void requestPermission (String permission) {        Log.e(TAG,"requestPermission()......");        permissionHelper                .setForceAccepting(false) // default is false. its here so you know that it exists.                .request(permission);    }    public void requestPermission (String[] permissions) {        Log.e(TAG,"requestPermission()......");        permissionHelper                .setForceAccepting(false) // default is false. its here so you know that it exists.                .request(permissions);    }    @Override    public void onPermissionGranted(@NonNull String[] strings) {        Log.e(TAG,"onPermissionGranted()......");        startCheckService();    }    @Override    public void onPermissionDeclined(@NonNull String[] strings) {        Log.e(TAG,"onPermissionDeclined()......");    }    @Override    public void onPermissionPreGranted(@NonNull String s) {        Log.e(TAG,"onPermissionPreGranted()......");    }    @Override    public void onPermissionNeedExplanation(@NonNull String s) {        Log.e(TAG,"onPermissionNeedExplanation()......");        neededPermission = PermissionHelper.declinedPermissions(this, MULTI_PERMISSIONS);        StringBuilder builder = new StringBuilder(neededPermission.length);        if (neededPermission.length > 0) {            for (String permission : neededPermission) {                builder.append(permission).append("\n");            }        }        AlertDialog alert = getAlertDialog(neededPermission, builder.toString());        if (!alert.isShowing()) {            alert.show();        }    }    @Override    public void onPermissionReallyDeclined(@NonNull String s) {        Log.e(TAG,"onPermissionReallyDeclined()......");    }    @Override    public void onNoPermissionNeeded() {        Log.e(TAG,"onNoPermissionNeeded()......");    }    public AlertDialog getAlertDialog(final String[] permissions, final String permissionName) {        if (builder == null) {            builder = new AlertDialog.Builder(this)                    .setTitle("Permission Needs Explanation")                    .create();        }        builder.setButton(DialogInterface.BUTTON_POSITIVE, "Request", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                permissionHelper.requestAfterExplanation(permissions);            }        });        builder.setMessage("Permissions need explanation (" + permissionName + ")");        return builder;    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        Log.e(TAG,"onActivityResult()......requestCode = " + requestCode);        Log.e(TAG,"onActivityResult()......resultCode = " + resultCode);        if (permissionHelper != null) {            permissionHelper.onActivityForResult(requestCode);        }        if (Activity.RESULT_OK == resultCode && UNKNOWN_APP_SOURCES_REQUEST_CODE == requestCode) {            installApk();        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        Log.e(TAG,"onRequestPermissionsResult()......");        if (permissionHelper != null) {            permissionHelper.onRequestPermissionsResult(requestCode,permissions,grantResults);        }    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof UpdateData) {            info = (UpdateData) data;            if (info.getProgress() == 100) {                mHandler.sendEmptyMessage(Constant.Msg.INSTALL);            }        }    }}